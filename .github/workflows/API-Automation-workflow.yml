name: API automation workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Execute API tests
        run: ./gradlew clean test

    
      - name: Upload JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-junit
          path: "**/build/test-results/test/**"

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-allure-results
          path: "**/build/allure-results/**"

      - name: Cara membuka report
        if: always()
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## Cara membuka report

          **Artifacts yang tersedia di run ini:**
          - **api-junit** → berisi file JUnit XML.
            - Cara buka: download & unzip, lalu buka file XML dengan editor / import ke tool CI (Jenkins, GitLab, dsb).

          - **api-allure-results** → berisi *raw* Allure results.
            - Cara buka sebagai HTML (lokal):
              1) Download & unzip **api-allure-results**.
              2) Install **Allure Commandline** di mesin lokal.
              3) Jalankan salah satu:
                 - `allure serve <folder-allure-results>`  → otomatis buka di browser, atau
                 - `allure generate <folder-allure-results> --clean -o allure-report`
                   lalu buka `allure-report/index.html`.

          > Catatan: Jika ingin HTML langsung dari pipeline, tambahkan langkah `./gradlew allureReport` dan upload folder `build/reports/allure-report`.
          EOF
